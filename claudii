#!/bin/bash

set -e

CLAUDII_CONTAINER_PREFIX="claudii-"

GLOBAL_CONFIG_DIR="$HOME/.config/claudii"
DOCKERFILES_DIR="$GLOBAL_CONFIG_DIR/Dockerfiles"

# Build the Docker image
build_image() {
    local ENV_NAME="$1"
    
    # Environment name is required
    if [[ -z "$ENV_NAME" ]]; then
        echo "Error: Environment name required"
        echo "Usage: claudii build <environment>"
        echo "Available environments:"
        ls -1 "$DOCKERFILES_DIR" 2>/dev/null | grep '\.Dockerfile$' | sed 's/\.Dockerfile$//' | sed 's/^/  - /'
        exit 1
    fi
    
    # Check if environment Dockerfile exists
    ENV_DOCKERFILE="$DOCKERFILES_DIR/${ENV_NAME}.Dockerfile"
    if [[ ! -f "$ENV_DOCKERFILE" ]]; then
        echo "Error: Environment '$ENV_NAME' not found at $ENV_DOCKERFILE"
        echo "Available environments:"
        ls -1 "$DOCKERFILES_DIR" 2>/dev/null | grep '\.Dockerfile$' | sed 's/\.Dockerfile$//' | sed 's/^/  - /'
        exit 1
    fi
    
    echo "Building environment: $ENV_NAME"
    IMAGE_TAG="claudii-${ENV_NAME}:latest"
    
    # Build from the Dockerfiles directory with entrypoint.sh
    docker build -t "$IMAGE_TAG" -f "$ENV_DOCKERFILE" "$DOCKERFILES_DIR/"
    
    if [[ $? -ne 0 ]]; then
        echo "Error: Failed to build $ENV_NAME environment"
        exit 1
    fi
    
    echo "Docker image built successfully: $IMAGE_TAG"
}


# Get Claude credentials from macOS keychain
get_claude_credentials() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        CLAUDE_CREDS=$(security find-generic-password -s "Claude Code-credentials" -w 2>/dev/null || echo "")
        if [[ -n "$CLAUDE_CREDS" ]]; then
            echo "$CLAUDE_CREDS"
        else
            echo "Warning: Claude Code credentials not found in keychain" >&2
            echo ""
        fi
    else
        echo "Warning: Credential extraction only supported on macOS" >&2
        echo ""
    fi
}

# Get git user configuration from host
get_git_config() {
    GIT_USER_NAME=$(git config --global user.name 2>/dev/null || echo "")
    GIT_USER_EMAIL=$(git config --global user.email 2>/dev/null || echo "")
    
    if [[ -z "$GIT_USER_NAME" || -z "$GIT_USER_EMAIL" ]]; then
        echo "Warning: Git user configuration not found on host" >&2
    fi
    
    # Use a simpler format for easier parsing
    echo "${GIT_USER_NAME}|${GIT_USER_EMAIL}"
}

# Get GitHub OAuth token from macOS keychain
get_github_token() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        GH_TOKEN_B64=$(security find-generic-password -s "gh:github.com" -w 2>/dev/null || echo "")
        if [[ -n "$GH_TOKEN_B64" ]]; then
            # Remove prefix and decode base64
            echo "$GH_TOKEN_B64" | sed 's/go-keyring-base64://' | base64 -d
        else
            echo "Warning: GitHub CLI credentials not found in keychain" >&2
            echo ""
        fi
    else
        echo "Warning: Credential extraction only supported on macOS" >&2
        echo ""
    fi
}

# Select GitHub repository using fzf
select_repo() {
    echo "Fetching your repositories and organizations..." >&2
    
    # Get user repos
    USER_REPOS=$(gh repo list --limit 1000 --json nameWithOwner -q '.[].nameWithOwner' 2>/dev/null || echo "")
    
    # Get list of orgs
    ORGS=$(gh api user/orgs -q '.[].login' 2>/dev/null || echo "")
    
    # Get repos from each org
    ORG_REPOS=""
    for org in $ORGS; do
        if [[ -n "$org" ]]; then
            echo "Fetching repos from $org..." >&2
            ORG_REPO_LIST=$(gh repo list "$org" --limit 1000 --json nameWithOwner -q '.[].nameWithOwner' 2>/dev/null || echo "")
            if [[ -n "$ORG_REPO_LIST" ]]; then
                ORG_REPOS="$ORG_REPOS$ORG_REPO_LIST"$'\n'
            fi
        fi
    done
    
    # Combine all repos
    ALL_REPOS=$(echo -e "$USER_REPOS\n$ORG_REPOS" | grep -v '^$' | sort -u)
    
    if [[ -z "$ALL_REPOS" ]]; then
        echo "Error: No repositories found or gh not authenticated" >&2
        return 1
    fi
    
    SELECTED_REPO=$(echo "$ALL_REPOS" | fzf --prompt="Select repository: " --height=20 --reverse)
    if [[ -z "$SELECTED_REPO" ]]; then
        echo "Error: No repository selected" >&2
        return 1
    fi
    
    echo "$SELECTED_REPO"
}

# Prompt for branch name
get_branch_name() {
    read -p "Enter new branch name: " BRANCH_NAME
    if [[ -z "$BRANCH_NAME" ]]; then
        echo "Error: Branch name cannot be empty" >&2
        return 1
    fi
    echo "$BRANCH_NAME"
}

# Start a new container
start_container() {
    # Parse arguments: [env] repo branch
    local ENV_NAME=""
    local SELECTED_REPO=""
    local BRANCH_NAME=""
    
    # Parse arguments: env repo branch
    if [[ $# -lt 1 ]]; then
        echo "Error: Environment name required"
        echo "Usage: claudii start <environment> [repo] [branch]"
        exit 1
    fi
    
    ENV_NAME="$1"
    
    # Check if environment exists
    if [[ ! -f "$DOCKERFILES_DIR/${ENV_NAME}.Dockerfile" ]]; then
        echo "Error: Environment '$ENV_NAME' not found"
        echo "Available environments:"
        ls -1 "$DOCKERFILES_DIR" 2>/dev/null | grep '\.Dockerfile$' | sed 's/\.Dockerfile$//' | sed 's/^/  - /'
        exit 1
    fi
    
    # Get repo and branch from arguments
    if [[ $# -ge 2 ]]; then
        SELECTED_REPO="$2"
    fi
    if [[ $# -ge 3 ]]; then
        BRANCH_NAME="$3"
    fi
    
    # Check if image exists
    IMAGE_TO_USE="claudii-${ENV_NAME}:latest"
    if ! docker image inspect "$IMAGE_TO_USE" >/dev/null 2>&1; then
        echo "Docker image not found. Please run 'claudii build $ENV_NAME' first."
        exit 1
    fi
    
    # Generate unique container name
    CONTAINER_NAME="${CLAUDII_CONTAINER_PREFIX}$(date +%s)"
    
    # If no arguments provided, use interactive selection
    if [[ -z "$SELECTED_REPO" ]]; then
        echo "Select a repository to work on:"
        SELECTED_REPO=$(select_repo)
        if [[ $? -ne 0 ]]; then
            echo "Repository selection cancelled"
            return 1
        fi
    fi
    
    if [[ -z "$BRANCH_NAME" ]]; then
        echo "Selected repository: $SELECTED_REPO"
        BRANCH_NAME=$(get_branch_name)
        if [[ $? -ne 0 ]]; then
            echo "Branch creation cancelled"
            return 1
        fi
    fi
    
    echo "Using repository: $SELECTED_REPO"
    echo "Using branch: $BRANCH_NAME"
    
    # Get credentials
    CLAUDE_CREDENTIALS=$(get_claude_credentials)
    GH_TOKEN=$(get_github_token)
    GIT_CONFIG_DATA=$(get_git_config)
    
    echo "Starting container: $CONTAINER_NAME"
    
    # Get GitHub username from hosts.yml if it exists
    GH_USER=$(grep -A2 "github.com:" ~/.config/gh/hosts.yml 2>/dev/null | grep "user:" | cut -d' ' -f6 || echo "")
    
    # Create hosts.yml content
    GH_HOSTS_CONTENT=""
    if [[ -n "$GH_TOKEN" ]]; then
        GH_HOSTS_CONTENT="github.com:
    oauth_token: $GH_TOKEN
    user: ${GH_USER:-unknown}
    git_protocol: https"
    fi
    
    # Run container
    docker run -it --rm --name "$CONTAINER_NAME" \
        -e "CLAUDE_CREDENTIALS=$CLAUDE_CREDENTIALS" \
        -e "GH_HOSTS_CONTENT=$GH_HOSTS_CONTENT" \
        -e "GIT_CONFIG_DATA=$GIT_CONFIG_DATA" \
        "$IMAGE_TO_USE" "$SELECTED_REPO" "$BRANCH_NAME"
    
    echo "Container stopped"
}

# Clean up stopped containers
clean_containers() {
    echo "Cleaning up Claudii containers..."
    
    # Get all containers (running and stopped) with Claudii prefix
    CONTAINERS=$(docker ps -a --filter "name=${CLAUDII_CONTAINER_PREFIX}" --format "{{.Names}}" 2>/dev/null || true)
    
    if [[ -z "$CONTAINERS" ]]; then
        echo "No Claudii containers found"
        return
    fi
    
    # Remove containers
    echo "$CONTAINERS" | xargs docker rm -f 2>/dev/null || true
    echo "Cleaned up containers: $CONTAINERS"
}

# Generate a complete Dockerfile with all claudii requirements
generate_claudii_dockerfile() {
    local ENV_NAME="$1"
    local DOCKERFILE="$DOCKERFILES_DIR/${ENV_NAME}.Dockerfile"
    
    cat > "$DOCKERFILE" << 'EOF'
FROM ubuntu:24.04

# ===== CLAUDII CORE REQUIREMENTS - DO NOT MODIFY THIS SECTION =====
# This section contains essential requirements for claudii to function properly

# Create developer user first
RUN useradd -m -s /bin/bash developer

# Install essential system packages including sudo
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl \
    gpg \
    sudo \
    lsb-release \
    software-properties-common \
    git \
    vim \
    neovim \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Configure sudo for developer user
RUN echo "developer ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Install Node.js from NodeSource (required for Claude Code)
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/*

# Install GitHub CLI
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y gh && \
    rm -rf /var/lib/apt/lists/*

# Switch to developer user
USER developer
WORKDIR /home/developer

# Configure npm to install globally in user directory
ENV NPM_CONFIG_PREFIX=/home/developer/.npm-global
ENV PATH=$NPM_CONFIG_PREFIX/bin:$PATH
RUN mkdir -p /home/developer/.npm-global

# Install Claude Code CLI
RUN npm install -g @anthropic-ai/claude-code

# Create necessary directories
RUN mkdir -p /home/developer/.claude /home/developer/.config/gh /home/developer/workspace

# ===== END OF CLAUDII CORE REQUIREMENTS =====

# ===== USER CUSTOMIZATION SECTION =====
# Add your own tools and dependencies below this line
# Example installations (uncomment and modify as needed):

# Install build tools
# RUN sudo apt-get update && sudo apt-get install -y \
#     build-essential \
#     pkg-config \
#     && sudo rm -rf /var/lib/apt/lists/*

# Install Python
# RUN sudo apt-get update && sudo apt-get install -y \
#     python3 \
#     python3-pip \
#     python3-venv \
#     && sudo rm -rf /var/lib/apt/lists/*

# Install Rust
# RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
# ENV PATH="/home/developer/.cargo/bin:${PATH}"

# Install Go
# RUN wget -q https://go.dev/dl/go1.22.0.linux-amd64.tar.gz && \
#     sudo tar -C /usr/local -xzf go1.22.0.linux-amd64.tar.gz && \
#     rm go1.22.0.linux-amd64.tar.gz
# ENV PATH="/usr/local/go/bin:${PATH}"

# ===== FINAL CONFIGURATION =====
# Copy claudii scripts and configuration (DO NOT MODIFY)
USER root
COPY entrypoint.sh /entrypoint.sh
COPY CLAUDE.md /home/developer/.claude/CLAUDE.md
RUN chmod +x /entrypoint.sh && \
    chown developer:developer /home/developer/.claude/CLAUDE.md

USER developer
WORKDIR /home/developer/workspace

ENTRYPOINT ["/entrypoint.sh"]
EOF
}

# List available environments
list_environments() {
    echo "Available environments:"
    if [[ -d "$DOCKERFILES_DIR" ]]; then
        local envs=$(ls -1 "$DOCKERFILES_DIR" 2>/dev/null | grep '\.Dockerfile$' | sed 's/\.Dockerfile$//')
        if [[ -n "$envs" ]]; then
            echo "$envs" | sed 's/^/  - /'
        else
            echo "  (none - use 'claudii env-add <name>' to create one)"
        fi
    else
        echo "  (none - run 'claudii env-add <name>' to create one)"
    fi
    echo ""
    echo "To create a new environment:"
    echo "  1. Run 'claudii env-add <name>'"
    echo "  2. Run 'claudii build <name>'"
}

# Add a new environment
add_environment() {
    local ENV_NAME="$1"
    
    if [[ -z "$ENV_NAME" ]]; then
        echo "Error: Environment name required"
        echo "Usage: claudii env-add <name>"
        exit 1
    fi
    
    # Check if environment already exists
    if [[ -f "$DOCKERFILES_DIR/${ENV_NAME}.Dockerfile" ]]; then
        echo "Error: Environment '$ENV_NAME' already exists at $DOCKERFILES_DIR/${ENV_NAME}.Dockerfile"
        exit 1
    fi
    
    # Create Dockerfiles directory if it doesn't exist
    mkdir -p "$DOCKERFILES_DIR"
    
    # Generate the complete Dockerfile with all claudii requirements
    generate_claudii_dockerfile "$ENV_NAME"
    
    echo "Environment '$ENV_NAME' created at $DOCKERFILES_DIR/${ENV_NAME}.Dockerfile"
    echo "You can now run 'claudii build $ENV_NAME' to build it"
}

# Uninstall claudii completely
uninstall_claudii() {
    echo "This will uninstall claudii and remove all configuration:"
    echo "  - Remove ~/.config/claudii/"
    echo "  - Remove ~/.local/bin/claudii symlink"
    echo "  - Remove claudii Docker images"
    echo ""
    echo "Note: PATH modifications will NOT be removed as they may affect other tools"
    echo ""
    read -p "Are you sure you want to uninstall? (y/N) " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Uninstall cancelled"
        return 0
    fi
    
    echo "Uninstalling claudii..."
    
    # Remove config directory
    if [[ -d "$HOME/.config/claudii" ]]; then
        echo "Removing ~/.config/claudii/..."
        rm -rf "$HOME/.config/claudii"
    fi
    
    # Remove symlink
    if [[ -L "$HOME/.local/bin/claudii" ]]; then
        echo "Removing ~/.local/bin/claudii symlink..."
        rm -f "$HOME/.local/bin/claudii"
    fi
    
    # Remove Docker images
    echo "Removing claudii Docker images..."
    docker images --format "{{.Repository}}:{{.Tag}}" | grep "^claudii" | while read image; do
        echo "Removing $image..."
        docker rmi "$image" 2>/dev/null || true
    done
    
    # Clean up any remaining containers
    clean_containers
    
    echo "Claudii has been uninstalled successfully!"
    echo "Note: The claudii repository itself was not removed."
    echo "Note: ~/.local/bin remains in your PATH for other tools."
}

# Show help
show_help() {
    cat << EOF
Claudii - Claude Code Development Container Helper

Usage: $0 <command> [options]

Commands:
    list                              List available environments
    env-add <name>                    Generate a new environment Dockerfile
                                      Example: $0 env-add rust
                                      Example: $0 env-add myproject
    build <environment>               Build a Docker image for an environment
                                      Example: $0 build rust
    start <environment> [repo] [branch]   Start a new development container
                                      Example: $0 start rust owner/repo feature-branch
                                      Example: $0 start rust (interactive repo selection)
    clean                             Remove all Claudii containers
    uninstall                         Remove claudii from your system
    help                              Show this help message

Workflow:
    1. Create environment: claudii env-add rust
    2. Edit the Dockerfile to add your tools
    3. Build it: claudii build rust
    4. Use it: claudii start rust owner/repo new-feature
EOF
}

# Main command handling
case "${1:-}" in
    list)
        list_environments
        ;;
    env-add)
        shift  # Remove 'env-add' from arguments
        add_environment "$@"
        ;;
    build)
        shift  # Remove 'build' from arguments
        build_image "$@"
        ;;
    start)
        shift  # Remove 'start' from arguments
        start_container "$@"
        ;;
    clean)
        clean_containers
        ;;
    uninstall)
        uninstall_claudii
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "Error: Unknown command '${1:-}'"
        echo
        show_help
        exit 1
        ;;
esac